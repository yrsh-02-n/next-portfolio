// Query TypeMap
import '@sanity/client'

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type BlockContent = Array<{
	children?: Array<{
		marks?: Array<string>
		text?: string
		_type: 'span'
		_key: string
	}>
	style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
	listItem?: 'bullet' | 'number'
	markDefs?: Array<{
		href?: string
		_type: 'link'
		_key: string
	}>
	level?: number
	_type: 'block'
	_key: string
}>

export type SplitImage = {
	_type: 'splitImage'
	orientation?: 'imageLeft' | 'imageRight'
	title?: string
	image?: {
		asset?: {
			_ref: string
			_type: 'reference'
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
		}
		media?: unknown
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: 'image'
	}
}

export type Hero = {
	_type: 'hero'
	title?: string
	text?: BlockContent
	image?: {
		asset?: {
			_ref: string
			_type: 'reference'
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
		}
		media?: unknown
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: 'image'
	}
}

export type Features = {
	_type: 'features'
	title?: string
	features?: Array<{
		title?: string
		text?: string
		_type: 'feature'
		_key: string
	}>
}

export type Faqs = {
	_type: 'faqs'
	title?: string
	faqs?: Array<{
		_ref: string
		_type: 'reference'
		_weak?: boolean
		_key: string
		[internalGroqTypeReferenceTo]?: 'faq'
	}>
}

export type Faq = {
	_id: string
	_type: 'faq'
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	body?: BlockContent
}

export type PageBuilder = Array<
	| ({
			_key: string
	  } & Hero)
	| ({
			_key: string
	  } & SplitImage)
	| ({
			_key: string
	  } & Features)
	| ({
			_key: string
	  } & Faqs)
>

export type Page = {
	_id: string
	_type: 'page'
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	slug?: Slug
	content?: PageBuilder
	mainImage?: {
		asset?: {
			_ref: string
			_type: 'reference'
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
		}
		media?: unknown
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: 'image'
	}
}

export type PortfolioCase = {
	_id: string
	_type: 'portfolioCase'
	_createdAt: string
	_updatedAt: string
	_rev: string
	caseTitle?: string
	caseCategory?: 'design' | 'development'
	slug?: Slug
	caseDescription?: string
	caseText?: Array<{
		textBlock?: string
		_key: string
	}>
	caseImages?: Array<{
		image?: {
			asset?: {
				_ref: string
				_type: 'reference'
				_weak?: boolean
				[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
			}
			media?: unknown
			hotspot?: SanityImageHotspot
			crop?: SanityImageCrop
			_type: 'image'
		}
		_key: string
	}>
	caseCardImage?: {
		asset?: {
			_ref: string
			_type: 'reference'
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
		}
		media?: unknown
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: 'image'
	}
	caseUrl?: string
	publishedAt?: string
}

export type HeroScreen = {
	_id: string
	_type: 'heroScreen'
	_createdAt: string
	_updatedAt: string
	_rev: string
	heroScreenTexts?: Array<{
		line?: Array<string>
		_key: string
	}>
	heroScreenLinks?: Array<{
		title?: string
		shortTitle?: string
		url?: string
		order?: number
		_key: string
	}>
}

export type SocialLink = {
	_id: string
	_type: 'socialLink'
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	url?: string
	icon?: {
		asset?: {
			_ref: string
			_type: 'reference'
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
		}
		media?: unknown
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: 'image'
	}
	order?: number
}

export type SanityImagePaletteSwatch = {
	_type: 'sanity.imagePaletteSwatch'
	background?: string
	foreground?: string
	population?: number
	title?: string
}

export type SanityImagePalette = {
	_type: 'sanity.imagePalette'
	darkMuted?: SanityImagePaletteSwatch
	lightVibrant?: SanityImagePaletteSwatch
	darkVibrant?: SanityImagePaletteSwatch
	vibrant?: SanityImagePaletteSwatch
	dominant?: SanityImagePaletteSwatch
	lightMuted?: SanityImagePaletteSwatch
	muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
	_type: 'sanity.imageDimensions'
	height?: number
	width?: number
	aspectRatio?: number
}

export type SanityImageHotspot = {
	_type: 'sanity.imageHotspot'
	x?: number
	y?: number
	height?: number
	width?: number
}

export type SanityImageCrop = {
	_type: 'sanity.imageCrop'
	top?: number
	bottom?: number
	left?: number
	right?: number
}

export type SanityFileAsset = {
	_id: string
	_type: 'sanity.fileAsset'
	_createdAt: string
	_updatedAt: string
	_rev: string
	originalFilename?: string
	label?: string
	title?: string
	description?: string
	altText?: string
	sha1hash?: string
	extension?: string
	mimeType?: string
	size?: number
	assetId?: string
	uploadId?: string
	path?: string
	url?: string
	source?: SanityAssetSourceData
}

export type SanityImageAsset = {
	_id: string
	_type: 'sanity.imageAsset'
	_createdAt: string
	_updatedAt: string
	_rev: string
	originalFilename?: string
	label?: string
	title?: string
	description?: string
	altText?: string
	sha1hash?: string
	extension?: string
	mimeType?: string
	size?: number
	assetId?: string
	uploadId?: string
	path?: string
	url?: string
	metadata?: SanityImageMetadata
	source?: SanityAssetSourceData
}

export type SanityImageMetadata = {
	_type: 'sanity.imageMetadata'
	location?: Geopoint
	dimensions?: SanityImageDimensions
	palette?: SanityImagePalette
	lqip?: string
	blurHash?: string
	hasAlpha?: boolean
	isOpaque?: boolean
}

export type Geopoint = {
	_type: 'geopoint'
	lat?: number
	lng?: number
	alt?: number
}

export type Slug = {
	_type: 'slug'
	current?: string
	source?: string
}

export type SanityAssetSourceData = {
	_type: 'sanity.assetSourceData'
	name?: string
	id?: string
	url?: string
}

export type AllSanitySchemaTypes =
	| BlockContent
	| SplitImage
	| Hero
	| Features
	| Faqs
	| Faq
	| PageBuilder
	| Page
	| PortfolioCase
	| HeroScreen
	| SocialLink
	| SanityImagePaletteSwatch
	| SanityImagePalette
	| SanityImageDimensions
	| SanityImageHotspot
	| SanityImageCrop
	| SanityFileAsset
	| SanityImageAsset
	| SanityImageMetadata
	| Geopoint
	| Slug
	| SanityAssetSourceData
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./sanity/lib/queries.ts
// Variable: PAGE_QUERY
// Query: *[_type == "page" && slug.current == $slug][0]{  ...,  content[]{    ...,    _type == "faqs" => {      ...,      faqs[]->    }  }}
export type PAGE_QUERYResult = {
	_id: string
	_type: 'page'
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	slug?: Slug
	content: Array<
		| {
				_key: string
				_type: 'faqs'
				title?: string
				faqs: Array<{
					_id: string
					_type: 'faq'
					_createdAt: string
					_updatedAt: string
					_rev: string
					title?: string
					body?: BlockContent
				}> | null
		  }
		| {
				_key: string
				_type: 'features'
				title?: string
				features?: Array<{
					title?: string
					text?: string
					_type: 'feature'
					_key: string
				}>
		  }
		| {
				_key: string
				_type: 'hero'
				title?: string
				text?: BlockContent
				image?: {
					asset?: {
						_ref: string
						_type: 'reference'
						_weak?: boolean
						[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
					}
					media?: unknown
					hotspot?: SanityImageHotspot
					crop?: SanityImageCrop
					_type: 'image'
				}
		  }
		| {
				_key: string
				_type: 'splitImage'
				orientation?: 'imageLeft' | 'imageRight'
				title?: string
				image?: {
					asset?: {
						_ref: string
						_type: 'reference'
						_weak?: boolean
						[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
					}
					media?: unknown
					hotspot?: SanityImageHotspot
					crop?: SanityImageCrop
					_type: 'image'
				}
		  }
	> | null
	mainImage?: {
		asset?: {
			_ref: string
			_type: 'reference'
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
		}
		media?: unknown
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: 'image'
	}
} | null

declare module '@sanity/client' {
	interface SanityQueries {
		'*[_type == "page" && slug.current == $slug][0]{\n  ...,\n  content[]{\n    ...,\n    _type == "faqs" => {\n      ...,\n      faqs[]->\n    }\n  }\n}': PAGE_QUERYResult
	}
}
