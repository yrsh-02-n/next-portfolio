// Query TypeMap
import '@sanity/client'

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type TextOnlyBlock = {
	_type: 'textOnlyBlock'
	text?: Array<{
		children?: Array<{
			marks?: Array<string>
			text?: string
			_type: 'span'
			_key: string
		}>
		style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
		listItem?: 'bullet' | 'number'
		markDefs?: Array<{
			href?: string
			_type: 'link'
			_key: string
		}>
		level?: number
		_type: 'block'
		_key: string
	}>
}

export type MultipleCaseImages = {
	_type: 'multipleCaseImages'
	images?: Array<{
		asset?: {
			_ref: string
			_type: 'reference'
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
		}
		media?: unknown
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: 'image'
		_key: string
	}>
}

export type CaseOneImage = {
	_type: 'caseOneImage'
	image?: {
		asset?: {
			_ref: string
			_type: 'reference'
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
		}
		media?: unknown
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: 'image'
	}
	alt?: string
}

export type BlockContent = Array<{
	children?: Array<{
		marks?: Array<string>
		text?: string
		_type: 'span'
		_key: string
	}>
	style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
	listItem?: 'bullet' | 'number'
	markDefs?: Array<{
		href?: string
		_type: 'link'
		_key: string
	}>
	level?: number
	_type: 'block'
	_key: string
}>

export type HeadingBlock = {
	_type: 'headingBlock'
	title?: string
	description?: BlockContent
	btnText?: string
	btnUrl?: string
	image?: {
		asset?: {
			_ref: string
			_type: 'reference'
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
		}
		media?: unknown
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: 'image'
	}
}

export type SplitImage = {
	_type: 'splitImage'
	orientation?: 'imageLeft' | 'imageRight'
	text?: BlockContent
	image?: {
		asset?: {
			_ref: string
			_type: 'reference'
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
		}
		media?: unknown
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: 'image'
	}
}

export type PageBuilder = Array<
	| ({
			_key: string
	  } & HeadingBlock)
	| ({
			_key: string
	  } & SplitImage)
	| ({
			_key: string
	  } & CaseOneImage)
	| ({
			_key: string
	  } & MultipleCaseImages)
	| ({
			_key: string
	  } & TextOnlyBlock)
>

export type PortfolioCase = {
	_id: string
	_type: 'portfolioCase'
	_createdAt: string
	_updatedAt: string
	_rev: string
	order?: number
	caseTitle?: string
	caseDescription?: string
	slug?: Slug
	caseCategory?: 'design' | 'dev'
	content?: PageBuilder
}

export type HeroScreen = {
	_id: string
	_type: 'heroScreen'
	_createdAt: string
	_updatedAt: string
	_rev: string
	heroScreenTexts?: Array<{
		line?: Array<string>
		_key: string
	}>
	heroScreenLinks?: Array<{
		title?: string
		shortTitle?: string
		url?: string
		order?: number
		_key: string
	}>
}

export type SocialLink = {
	_id: string
	_type: 'socialLink'
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	url?: string
	icon?: {
		asset?: {
			_ref: string
			_type: 'reference'
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
		}
		media?: unknown
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: 'image'
	}
	order?: number
}

export type SanityImagePaletteSwatch = {
	_type: 'sanity.imagePaletteSwatch'
	background?: string
	foreground?: string
	population?: number
	title?: string
}

export type SanityImagePalette = {
	_type: 'sanity.imagePalette'
	darkMuted?: SanityImagePaletteSwatch
	lightVibrant?: SanityImagePaletteSwatch
	darkVibrant?: SanityImagePaletteSwatch
	vibrant?: SanityImagePaletteSwatch
	dominant?: SanityImagePaletteSwatch
	lightMuted?: SanityImagePaletteSwatch
	muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
	_type: 'sanity.imageDimensions'
	height?: number
	width?: number
	aspectRatio?: number
}

export type SanityImageHotspot = {
	_type: 'sanity.imageHotspot'
	x?: number
	y?: number
	height?: number
	width?: number
}

export type SanityImageCrop = {
	_type: 'sanity.imageCrop'
	top?: number
	bottom?: number
	left?: number
	right?: number
}

export type SanityFileAsset = {
	_id: string
	_type: 'sanity.fileAsset'
	_createdAt: string
	_updatedAt: string
	_rev: string
	originalFilename?: string
	label?: string
	title?: string
	description?: string
	altText?: string
	sha1hash?: string
	extension?: string
	mimeType?: string
	size?: number
	assetId?: string
	uploadId?: string
	path?: string
	url?: string
	source?: SanityAssetSourceData
}

export type SanityImageAsset = {
	_id: string
	_type: 'sanity.imageAsset'
	_createdAt: string
	_updatedAt: string
	_rev: string
	originalFilename?: string
	label?: string
	title?: string
	description?: string
	altText?: string
	sha1hash?: string
	extension?: string
	mimeType?: string
	size?: number
	assetId?: string
	uploadId?: string
	path?: string
	url?: string
	metadata?: SanityImageMetadata
	source?: SanityAssetSourceData
}

export type SanityImageMetadata = {
	_type: 'sanity.imageMetadata'
	location?: Geopoint
	dimensions?: SanityImageDimensions
	palette?: SanityImagePalette
	lqip?: string
	blurHash?: string
	hasAlpha?: boolean
	isOpaque?: boolean
}

export type Geopoint = {
	_type: 'geopoint'
	lat?: number
	lng?: number
	alt?: number
}

export type Slug = {
	_type: 'slug'
	current?: string
	source?: string
}

export type SanityAssetSourceData = {
	_type: 'sanity.assetSourceData'
	name?: string
	id?: string
	url?: string
}

export type AllSanitySchemaTypes =
	| TextOnlyBlock
	| MultipleCaseImages
	| CaseOneImage
	| BlockContent
	| HeadingBlock
	| SplitImage
	| PageBuilder
	| PortfolioCase
	| HeroScreen
	| SocialLink
	| SanityImagePaletteSwatch
	| SanityImagePalette
	| SanityImageDimensions
	| SanityImageHotspot
	| SanityImageCrop
	| SanityFileAsset
	| SanityImageAsset
	| SanityImageMetadata
	| Geopoint
	| Slug
	| SanityAssetSourceData
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./sanity/lib/queries.ts
// Variable: PORTFOLIO_CASE_SLUGS
// Query: *[_type == "portfolioCase" && defined(slug.current)]{  slug}
export type PORTFOLIO_CASE_SLUGSResult = Array<{
	slug: Slug | null
}>
// Variable: PORTFOLIO_CASE_PAGE_BY_CATEGORY
// Query: *[_type == "portfolioCase" && slug.current == $slug && caseCategory == $category][0]{  _id,  caseTitle,  caseCategory,  slug,  content[]{    _key,    _type,    // Conditional fields based on block type    _type == "headingBlock" => {      title,      description,      btnText,      btnUrl,      image{        asset->{          _id,          url,          metadata        }      }    },    _type == "splitImage" => {      orientation,      text,      image{        asset->{          _id,          url,          metadata        }      }    },    _type == "caseOneImage" => {      image{        asset->{          _id,          url,          metadata        }      },      alt    },    _type == "multipleCaseImages" => {      images[]{        asset->{          _id,          url,          metadata        }      }    },    _type == "textOnlyBlock" => {        text      }      }}
export type PORTFOLIO_CASE_PAGE_BY_CATEGORYResult = {
	_id: string
	caseTitle: string | null
	caseCategory: 'design' | 'dev' | null
	slug: Slug | null
	content: Array<
		| {
				_key: string
				_type: 'caseOneImage'
				image: {
					asset: {
						_id: string
						url: string | null
						metadata: SanityImageMetadata | null
					} | null
				} | null
				alt: string | null
		  }
		| {
				_key: string
				_type: 'headingBlock'
				title: string | null
				description: BlockContent | null
				btnText: string | null
				btnUrl: string | null
				image: {
					asset: {
						_id: string
						url: string | null
						metadata: SanityImageMetadata | null
					} | null
				} | null
		  }
		| {
				_key: string
				_type: 'multipleCaseImages'
				images: Array<{
					asset: {
						_id: string
						url: string | null
						metadata: SanityImageMetadata | null
					} | null
				}> | null
		  }
		| {
				_key: string
				_type: 'splitImage'
				orientation: 'imageLeft' | 'imageRight' | null
				text: BlockContent | null
				image: {
					asset: {
						_id: string
						url: string | null
						metadata: SanityImageMetadata | null
					} | null
				} | null
		  }
		| {
				_key: string
				_type: 'textOnlyBlock'
				text: Array<{
					children?: Array<{
						marks?: Array<string>
						text?: string
						_type: 'span'
						_key: string
					}>
					style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
					listItem?: 'bullet' | 'number'
					markDefs?: Array<{
						href?: string
						_type: 'link'
						_key: string
					}>
					level?: number
					_type: 'block'
					_key: string
				}> | null
		  }
	> | null
} | null
// Variable: PORTFOLIO_CASE_SLUGS_BY_CATEGORY
// Query: *[_type == "portfolioCase" && caseCategory == $category && defined(slug.current)]{  slug}
export type PORTFOLIO_CASE_SLUGS_BY_CATEGORYResult = Array<{
	slug: Slug | null
}>

declare module '@sanity/client' {
	interface SanityQueries {
		'*[_type == "portfolioCase" && defined(slug.current)]{\n  slug\n}': PORTFOLIO_CASE_SLUGSResult
		'*[_type == "portfolioCase" && slug.current == $slug && caseCategory == $category][0]{\n  _id,\n  caseTitle,\n  caseCategory,\n  slug,\n  content[]{\n    _key,\n    _type,\n    // Conditional fields based on block type\n    _type == "headingBlock" => {\n      title,\n      description,\n      btnText,\n      btnUrl,\n      image{\n        asset->{\n          _id,\n          url,\n          metadata\n        }\n      }\n    },\n    _type == "splitImage" => {\n      orientation,\n      text,\n      image{\n        asset->{\n          _id,\n          url,\n          metadata\n        }\n      }\n    },\n    _type == "caseOneImage" => {\n      image{\n        asset->{\n          _id,\n          url,\n          metadata\n        }\n      },\n      alt\n    },\n    _type == "multipleCaseImages" => {\n      images[]{\n        asset->{\n          _id,\n          url,\n          metadata\n        }\n      }\n    },\n    _type == "textOnlyBlock" => {\n        text\n      }\n    \n  }\n}': PORTFOLIO_CASE_PAGE_BY_CATEGORYResult
		'*[_type == "portfolioCase" && caseCategory == $category && defined(slug.current)]{\n  slug\n}': PORTFOLIO_CASE_SLUGS_BY_CATEGORYResult
	}
}
